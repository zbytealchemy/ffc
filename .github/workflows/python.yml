name: Python Runtime CI

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'ci/**'
      - '.github/**'
      - 'pyproject.toml'
      - 'mypy.ini'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'ci/**'
      - '.github/**'
      - 'pyproject.toml'
      - 'mypy.ini'

permissions:
  contents: read
  packages: write

env:
  POETRY_VERSION: 1.6.1

jobs:
  validate:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v3

    - name: Debug repository structure
      run: |
        pwd
        ls -la
        ls -la ..

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        poetry --version
        poetry config virtualenvs.in-project true
        poetry config virtualenvs.create true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        pwd
        ls -la
        poetry install --no-interaction --no-ansi --no-root

    - name: Set PYTHONPATH
      run: echo "PYTHONPATH=$(pwd)/src" >> $GITHUB_ENV


    - name: Debug directory structure
      run: |
        echo "Current directory:"
        pwd
        echo "Listing root directory:"
        ls -la
        echo "Listing src directory:"
        ls -la src

    - name: Run tests
      run: |
        poetry run pytest tests/

    - name: Run CI validation
      run: make ci-validate

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: coverage.xml
        flags: python
        name: Python Runtime Coverage

  docker-build:
    needs: validate
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
    steps:
    - uses: actions/checkout@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        driver: docker-container
        driver-opts: |
          image=moby/buildkit:latest
          network=host

    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: Dockerfile
        load: true
        tags: ffc-runtime:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run -d --name ffc-test -p 8080:8080 ffc-runtime:test

        # Wait for container to become healthy
        for i in {1..12}; do
          HEALTH=$(docker inspect --format='{{.State.Health.Status}}' ffc-test)
          if [ "$HEALTH" == "healthy" ]; then
            echo "Container is healthy"
            break
          fi
          if [ "$i" -eq 12 ]; then
            echo "Container health check failed: $HEALTH"
            docker logs ffc-test
            exit 1
          fi
          echo "Waiting for container to become healthy... ($i/12)"
          sleep 5
        done

        # Test API endpoints
        curl -f http://localhost:8080/health || exit 1
        docker stop ffc-test
        docker rm ffc-test

  docker-push:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: src/ffc
    steps:
    - uses: actions/checkout@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        driver: docker-container
        driver-opts: |
          image=moby/buildkit:latest
          network=host

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        file: Dockerfile
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/agent-runtime:latest
          ghcr.io/${{ github.repository_owner }}/agent-runtime:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
